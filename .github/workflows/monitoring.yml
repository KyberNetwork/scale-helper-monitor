name: Scale Helper Monitor

on:
  schedule:
    # Run every 2 hours
    - cron: '0 */2 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main ]

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 10 # Reduced timeout for one-shot execution
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Build application
      run: go build -o scale-helper-monitor ./cmd/monitor

    - name: Run monitoring
      env:
        # Application Mode
        RUN_ONCE: "true"  # Run once and exit (perfect for GitHub Actions)
        
        # Slack Configuration
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
        # Tenderly Configuration
        TENDERLY_ACCESS_KEY: ${{ secrets.TENDERLY_ACCESS_KEY }}
        TENDERLY_USERNAME: ${{ secrets.TENDERLY_USERNAME }}
        TENDERLY_PROJECT: ${{ secrets.TENDERLY_PROJECT }}
        
        # Node URLs
        ETH_NODE_URL: ${{ secrets.ETH_NODE_URL }}
        POLYGON_NODE_URL: ${{ secrets.POLYGON_NODE_URL }}
        BSC_NODE_URL: ${{ secrets.BSC_NODE_URL }}
        ARBITRUM_NODE_URL: ${{ secrets.ARBITRUM_NODE_URL }}
        AVAX_NODE_URL: ${{ secrets.AVAX_NODE_URL }}
        BASE_NODE_URL: ${{ secrets.BASE_NODE_URL }}
        BERA_NODE_URL: ${{ secrets.BERA_NODE_URL }}
        MANTLE_NODE_URL: ${{ secrets.MANTLE_NODE_URL }}
        OPTIMISM_NODE_URL: ${{ secrets.OPTIMISM_NODE_URL }}
        SONIC_NODE_URL: ${{ secrets.SONIC_NODE_URL }}
        UNICHAIN_NODE_URL: ${{ secrets.UNICHAIN_NODE_URL }}

        # Contract Addresses
        CONTRACT_ADDRESS: ${{ secrets.CONTRACT_ADDRESS }}
        
      run: |
        echo "Starting scale helper monitoring (one-shot mode)..."
        ./scale-helper-monitor
